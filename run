#!/bin/bash
set -e
set -x

source environment.sh

FLYWHEEL_BASE=/flywheel/v0
IN=$FLYWHEEL_BASE/input
OUT=$FLYWHEEL_BASE/output
TMP=/tmp

# the following lets output show on stdout and stderr, and also
# redirects them to files that will appear in the output.
# combines http://stackoverflow.com/a/692407 and http://stackoverflow.com/a/11886837
exec > >(tee -i $OUT/stdout.log) 2> >(tee -i $OUT/stderr.log >&2)

cd $TMP

preprocess_nifti() {
  # because the python script is a no-op for things that are
  # correct, we can safely run it on data that has already been fixed.
  RAW=$1
  tmpdir=$(mktemp -d)

  BASENAME=$(basename $RAW)
  FIXED=$tmpdir/$BASENAME
  # fix nifti header issue
  python $FLYWHEEL_BASE/fix_nifti.py $RAW $FIXED

  WITHOUT_EXT="${BASENAME%%.*}"

  # converting input nifti to AFNI
  3dcalc -a $FIXED -prefix $WITHOUT_EXT -expr 'a'
  # XXX make sure WITHOUT_EXT was created?

  echo $WITHOUT_EXT+orig
}

anatomical=$(preprocess_nifti $IN/anatomical/*)
original_functional=$(preprocess_nifti $IN/functional/*)
# This warp target should be in the same space as the anatomical.
# In the future, this might be in the standard space.
warp_target=$IN/warp_target/*

# center to anatomical
# -cm alignment gets the functional lower than a grid alignment, which is what
# we want.
@Align_Centers -base $anatomical -dset $original_functional -cm
func=$(@GetAfniPrefix $original_functional)_shft+orig
funcprefix=$(@GetAfniPrefix $func)
# HACK HACK we toss this in to get our alignment _even lower_, so it's pretty close to the anatomical.
# This helps align_epi_anat avoid giant_move.
3drefit -dzorigin -4 $func

# align to anatomical
# This alignment function needs a lot of tweaking to deal with some of our data. Some notes on things that have
# worked well and poorly:
# -big_move often has worked pretty well. -giant_move tends to consider things that are a bit too far away.
# -cost lpc is often bad, lpa seems to give mixed results. Best results seem to come from nmi/mi
# -cmass nocmass can help sometimes, but requires having close alignment. read more here
#     https://afni.nimh.nih.gov/afni/community/board/read.php?1,70410,70413#msg-70413
# Because AFNI skull strip doesn't seem to work, we use 3dAutomask. it may be worth trying fsl bet for edge erosion
# to help with matching.
align_epi_anat.py -dset2 $func -dset1 $anatomical -dset2to1 -dset2_base 0 -suffix _func2anat \
  -dset1_strip 3dAutomask -dset2_strip 3dAutomask -cost nmi -big_move

# warp from warp_target to centered functional. This warp uses nearest neighbor
# interpolation, which makes it appropriate for segmentations.
cat_matvec -ONELINE ${funcprefix}_func2anat_mat.aff12.1D -I \
  > ${funcprefix}_anat2func_mat.aff12.1D

# warp the warp target (this code assumes it is a segmentation)
3dAllineate -1Dmatrix_apply ${funcprefix}_anat2func_mat.aff12.1D \
  -final NN \
  -base $func -master BASE -source $warp_target -prefix __tmp
funcsegprefix=$(@GetAfniPrefix $original_functional)_seg
# uncenter this back to the original functional space
@Align_Centers -base $original_functional -dset __tmp+orig -no_cp
# change the datum type to byte to save space
# this step also gets rid of the shift transform in the header
3dcalc -a __tmp+orig -expr a -datum byte -nscale -prefix $funcsegprefix
# copy segmentation information from atlas to this native-space
#   segmentation dataset and mark to be shown with integer colormap
3drefit -cmap INT_CMAP $funcsegprefix+orig
3drefit -copytables $warp_target $funcsegprefix+orig
# cleanup tmp files
rm __tmp*

# warp the anatomical to functional-space
anatprefix=$(@GetAfniPrefix $anatomical)_in_$(@GetAfniPrefix $original_functional)
3dAllineate -1Dmatrix_apply ${funcprefix}_anat2func_mat.aff12.1D \
  -base $func -master BASE -source $anatomical -prefix $anatprefix
# uncenter this back to the original functional space
@Align_Centers -base $original_functional -dset $anatprefix+orig -no_cp

# warp the functional to anatomical-space
warpedfuncprefix=$(@GetAfniPrefix $original_functional)_in_$(@GetAfniPrefix $anatomical)
3dAllineate -1Dmatrix_apply ${funcprefix}_func2anat_mat.aff12.1D \
  -base $anatomical -master BASE -source $func -prefix $warpedfuncprefix

# convert output to nifti
for result in \
  $funcsegprefix+orig.HEAD \
  $anatprefix+orig.HEAD \
  $warpedfuncprefix+orig.HEAD \
  $original_functional.HEAD; do
  3dAFNItoNIFTI $result
  gzip $(@GetAfniPrefix $result).nii
  mv $(@GetAfniPrefix $result).nii.gz $OUT
done

# copy to output directory
mv *.aff12.1D $OUT
